package XMLJava.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_VarElementRef_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_VarElementRef_InferenceRule() {
  }
  public void applyRule(final SNode varElementRef, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      SNode _nodeToCheck_1029348928467 = varElementRef;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:72afadfe-52b2-4715-8510-3a8b6e473903(XMLJava.typesystem)", "507412791513941960", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:72afadfe-52b2-4715-8510-3a8b6e473903(XMLJava.typesystem)", "507412791513941403", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(varElementRef, MetaAdapterFactory.getReferenceLink(0xab66041823a64c26L, 0xa8fc9db16a81fe77L, 0x70ab13ed8ab4340L, 0x70ab13ed8ab4341L, "varElement")), MetaAdapterFactory.getContainmentLink(0xab66041823a64c26L, 0xa8fc9db16a81fe77L, 0x70ab13ed8aaae6eL, 0x70ab13ed8aaece7L, "content")), MetaAdapterFactory.getContainmentLink(0xab66041823a64c26L, 0xa8fc9db16a81fe77L, 0x5f7e1db3e89dce86L, 0x5f7e1db3e89dd0c8L, "expression")), "r:72afadfe-52b2-4715-8510-3a8b6e473903(XMLJava.typesystem)", "507412791513941984", true), _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xab66041823a64c26L, 0xa8fc9db16a81fe77L, 0x70ab13ed8ab4340L, "XMLJava.structure.VarElementRef");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
